name: Docs

on:
  push:
    branches:
      - main
    tags: '*'
  pull_request:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  docs:
    permissions:
      contents: write
      statuses: write
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - name: Install GitHubActions.jl in its own (shared) environment
        run: |
          using Pkg
          Pkg.activate("docs-logger-env"; shared=true)
          Pkg.add(Pkg.PackageSpec(; url="https://github.com/devmotion/GithubActions.jl", rev="patch-1"))
        shell: julia --color=yes {0}
      - run: |
          # The Julia command that will be executed
          julia_cmd=( julia --color=yes --code-coverage --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()' )

          # Add the prefix in front of the command if there is one
          prefix="${{ inputs.prefix }}"
          [[ -n $prefix ]] && julia_cmd=( "$prefix" "${julia_cmd[@]}" )

          # Run the Julia command
          "${julia_cmd[@]}"
        shell: bash
      - run: |
          # The Julia command that will be executed
          julia_cmd=( julia --color=yes --project=docs/ -e '
              @eval Module() begin
                  push!(LOAD_PATH, "@docs-logger-env") # access GitHubActions.jl
                  import Logging, GitHubActions
                  Logging.global_logger(GitHubActions.GitHubActionsLogger())
                  pop!(LOAD_PATH)
              end
              include("docs/make.jl")' )

          # Add the prefix in front of the command if there is one
          prefix="${{ inputs.prefix }}"
          [[ -n $prefix ]] && julia_cmd=( "$prefix" "${julia_cmd[@]}" )

          # Run the Julia command
          "${julia_cmd[@]}"
        shell: bash
        env:
          GKSwstype: 'nul'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
